//Left Panel
//USE w ProMicro

#include <Keypad.h>
#include <Joystick.h>

#define ENABLE_PULLUPS
#define NUMROTARIES 2
#define NUMBUTTONS 17
#define NUMROWS 4
#define NUMCOLS 5
int NAVpin = 15;
int HDGpin = 6;
int ALTpin = 7;
int mode= 0;
//0 ALT
//1 HDG
//2 NAV


byte buttons[NUMROWS][NUMCOLS] = {
  {1,2,3,4,5},
  {6,7,8,9,10},
  {11,12,13,14,15},
  {16,17},
};

struct rotariesdef {
  byte pin1;
  byte pin2;
  int ccwchar;
  int cwchar;
  volatile unsigned char state;
};

rotariesdef rotaries[NUMROTARIES] {
  {4,5,21,24,0},
  {2,3,25,28,0},
};

#define DIR_CCW 0x10
#define DIR_CW 0x20
#define R_START 0x0

#ifdef HALF_STEP
#define R_CCW_BEGIN 0x1
#define R_CW_BEGIN 0x2
#define R_START_M 0x3
#define R_CW_BEGIN_M 0x4
#define R_CCW_BEGIN_M 0x5
const unsigned char ttable[6][4] = {
  // R_START (00)
  {R_START_M,            R_CW_BEGIN,     R_CCW_BEGIN,  R_START},
  // R_CCW_BEGIN
  {R_START_M | DIR_CCW, R_START,        R_CCW_BEGIN,  R_START},
  // R_CW_BEGIN
  {R_START_M | DIR_CW,  R_CW_BEGIN,     R_START,      R_START},
  // R_START_M (11)
  {R_START_M,            R_CCW_BEGIN_M,  R_CW_BEGIN_M, R_START},
  // R_CW_BEGIN_M
  {R_START_M,            R_START_M,      R_CW_BEGIN_M, R_START | DIR_CW},
  // R_CCW_BEGIN_M
  {R_START_M,            R_CCW_BEGIN_M,  R_START_M,    R_START | DIR_CCW},
};
#else
#define R_CW_FINAL 0x1
#define R_CW_BEGIN 0x2
#define R_CW_NEXT 0x3
#define R_CCW_BEGIN 0x4
#define R_CCW_FINAL 0x5
#define R_CCW_NEXT 0x6

const unsigned char ttable[7][4] = {
  // R_START
  {R_START,    R_CW_BEGIN,  R_CCW_BEGIN, R_START},
  // R_CW_FINAL
  {R_CW_NEXT,  R_START,     R_CW_FINAL,  R_START | DIR_CW},
  // R_CW_BEGIN
  {R_CW_NEXT,  R_CW_BEGIN,  R_START,     R_START},
  // R_CW_NEXT
  {R_CW_NEXT,  R_CW_BEGIN,  R_CW_FINAL,  R_START},
  // R_CCW_BEGIN
  {R_CCW_NEXT, R_START,     R_CCW_BEGIN, R_START},
  // R_CCW_FINAL
  {R_CCW_NEXT, R_CCW_FINAL, R_START,     R_START | DIR_CCW},
  // R_CCW_NEXT
  {R_CCW_NEXT, R_CCW_FINAL, R_CCW_BEGIN, R_START},
};
#endif

byte rowPins[NUMROWS] = {21,20,19,18}; 
byte colPins[NUMCOLS] = {14,16,10,9,8};

Keypad buttbx = Keypad( makeKeymap(buttons), rowPins, colPins, NUMROWS, NUMCOLS); 

Joystick_ Joystick(JOYSTICK_DEFAULT_REPORT_ID, 
  JOYSTICK_TYPE_JOYSTICK, 32, 0,
  false, false, false, false, false, false,
  false, false, false, false, false);

#line 101 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
void setup();
#line 111 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
void loop();
#line 120 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
void CheckAllButtons(void);
#line 176 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
void rotary_init();
#line 188 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
unsigned char rotary_process(int _i);
#line 194 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
void CheckAllEncoders(void);
#line 101 "C:\\Users\\roieg_vnpq6oc\\Downloads\\Rotary_Test\\Left_Panel\\Left_Panel.ino"
void setup() {
  Joystick.begin();
  rotary_init();
  pinMode(ALTpin,OUTPUT);
  pinMode(HDGpin,OUTPUT);
  pinMode(NAVpin,OUTPUT);
  Serial.begin(9600);
  digitalWrite(ALTpin,HIGH);
 }

void loop() { 

  CheckAllEncoders();

  CheckAllButtons();

}


void CheckAllButtons(void) {  
    int key = buttbx.getKey();

    if (key != NO_KEY){
      Serial.println(key);
      if (key==1)
      {
         mode=2;
         Serial.println("MODE NAV");
         digitalWrite(NAVpin,HIGH);
         digitalWrite(HDGpin,LOW);
         digitalWrite(ALTpin,LOW);
      }
      if (key==6)
      {
         mode=1;
         Serial.println("MODE HDG");
         digitalWrite(HDGpin,HIGH);
         digitalWrite(ALTpin,LOW);
         digitalWrite(NAVpin,LOW);
      }
      if (key==11)
      {
         mode=0;
         Serial.println("MODE ALT");
         digitalWrite(ALTpin,HIGH);
         digitalWrite(HDGpin,LOW);
         digitalWrite(NAVpin,LOW);
      }
      if (key==9)
      {
        
        if (mode==0)
        {
          key=18;
        }
        if (mode==1)
        {
          key=19;
        }
         if (mode==2)
        {
          key=20;
        }
      }      
      Serial.print("MODE:");
      Serial.print(mode);
      Serial.print(" KEY: ");
      Serial.println(key);
      Joystick.setButton(key, 1); delay(50); Joystick.setButton(key, 0);
    }
    
}



void rotary_init() {
  for (int i=0;i<NUMROTARIES;i++) {
    pinMode(rotaries[i].pin1, INPUT);
    pinMode(rotaries[i].pin2, INPUT);
    #ifdef ENABLE_PULLUPS
      digitalWrite(rotaries[i].pin1, HIGH);
      digitalWrite(rotaries[i].pin2, HIGH);
    #endif
  }
}


unsigned char rotary_process(int _i) {
   unsigned char pinstate = (digitalRead(rotaries[_i].pin2) << 1) | digitalRead(rotaries[_i].pin1);
  rotaries[_i].state = ttable[rotaries[_i].state & 0xf][pinstate];
  return (rotaries[_i].state & 0x30);
}

void CheckAllEncoders(void) {
  for (int i=0;i<NUMROTARIES;i++) {
    unsigned char result = rotary_process(i);
    int Modi;
    

    if (result == DIR_CCW) {
      Modi=rotaries[i].ccwchar+mode;
      Serial.println(Modi);
      Joystick.setButton(Modi, 1); delay(50); Joystick.setButton(Modi, 0);
      
    };
    if (result == DIR_CW) {
      Modi=rotaries[i].cwchar+mode;
      Serial.println(Modi);
      Joystick.setButton(Modi, 1); delay(50); Joystick.setButton(Modi, 0);
      
    };
  }
}

